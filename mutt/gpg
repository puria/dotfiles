# -*-muttrc-*-
#
# Command formats for gpg.
# 
# This version uses gpg-2comp from 
#   http://muppet.faveve.uni-stuttgart.de/~gero/gpg-2comp/
#
# $ Id: gpg.rc,v 1.7 2000/02/02 10:40:59 roland Exp roland $
#
# %p    The empty string when no passphrase is needed,
#       the string "PGPPASSFD=0" if one is needed.
#
#       This is mostly used in conditional % sequences.
#
# %f    Most PGP commands operate on a single file or a file
#       containing a message.  %f expands to this file's name.
#
# %s    When verifying signatures, there is another temporary file
#       containing the detached signature.  %s expands to this
#       file's name.
#
# %a    In "signing" contexts, this expands to the value of the
#       configuration variable $pgp_sign_as.  You probably need to
#       use this within a conditional % sequence.
#
# %r    In many contexts, mutt passes key IDs to pgp.  %r expands to
#       a list of key IDs.
# decode application/pgp
set pgp_decode_command="gpg %?p?--passphrase-fd 0? --no-verbose --batch -o - %f"

# verify a pgp/mime signature
set pgp_verify_command="gpg --no-verbose --batch -o - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="gpg --passphrase-fd 0 --no-verbose --batch --output - %f"

# create a pgp/mime signed attachment
set pgp_sign_command="gpg --no-verbose --batch --output - --passphrase-fd 0 --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
set pgp_clearsign_command="gpg --no-verbose --batch --output - --passphrase-fd 0 --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
set pgp_encrypt_only_command="pgpewrap gpg -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
set pgp_encrypt_sign_command="pgpewrap gpg --passphrase-fd 0 -v --batch -o - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"


# import a key into the public key ring
set pgp_import_command="gpg --no-verbose --import -v %f"

# export a key from the public key ring
set pgp_export_command="gpg --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="gpg --no-verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="gpg --no-verbose --batch --with-colons --list-keys %r"

# read in the secret key ring
set pgp_list_secring_command="gpg --no-verbose --batch --with-colons --list-secret-keys %r"

# receive key from keyserver:
#set pgp_getkeys_command="wrap.sh -g %r"
set pgp_getkeys_command=""

# string that the verify command outputs if the signature is good
# set pgp_good_sign="Good signature!!"     # English version
# set pgp_good_sign=""                    # not needed, if exit code ok.
set pgp_use_gpg_agent        = yes
set pgp_verify_sig           = yes
set pgp_autosign             = yes
#set pgp_autoencrypt          = yes
set pgp_replyencrypt         = yes
set pgp_auto_decode          = yes
set pgp_timeout              = 3600 #1 hr
set pgp_sign_as              = 0x57AA9EBCB1DA7141
set pgp_good_sign = "^gpg: Good signature from "

set fcc_clear
set forward_decrypt
unset pipe_decode
set pgp_ignore_subkeys  # On OpenPGP keys only show the main key, not the sub.
send-hook . set pgp_autosign      # pgp sign every outgoing mail. (send-hook?)
unset pgp_autosign
#set pgp_autoencrypt   # pgp encrypt every outgoing mail. (send-hook?)
#set pgp_create_traditional=ask-no       # Use old-style PGP? (don't do it!)
set pgp_replyencrypt    # Encrypt replies on encrypted mail
set pgp_replysign       # Sign replies on signed mail
set pgp_replysignencrypted      # Sign replies on encrypted mail
unset pgp_retainable_sigs       # disable retainable signatures.
set pgp_verify_sig=yes  # ask me whether I want to check a pgp signature
set pgp_timeout=7200    # forget PGP passphrase after 7200 seconds (=2 hours)
set pgp_strict_enc      # allway use QP enc. with PGP.
unset pgp_long_ids      # display 64bit PGP key-ids (don't change this!)
set pgp_show_unusable   # show unusable PGP keys in menu

# %n = number   %k = key id     %K = key id of the principal key
# # %u = user id  %a = algorithm  %A = algorithm of the princ. key
# # %l = length   %L = length of the princ. key
# # %f = flags    %F = flags of the princ. key
# # %c = capabilities             %C = capabilities of the princ. key
# # %t = trust/validity of the key-uid association
#set pgp_entry_format="%4n %t%f %[%y/%m/%d] %4l/0x%k %-4a %2c %u"
set pgp_entry_format="%3n %t%f %4l/0x%k %-4a %2c %u %[%a %e.%h'%y at %k:%M:%S %Z]"
set pgp_sort_keys=trust
macro compose S "Fgpg -a --clearsign -u 0x57AA9EBCB1DA7141"


# Save a copy of outgoing email, encrypted to yourself
#set pgp_self_encrypt=yes
#set pgp_default_key =0x57AA9EBCB1DA7141

